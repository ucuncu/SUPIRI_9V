<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\supiri_9V_1RELAY.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\supiri_9V_1RELAY.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Wed Dec 30 16:28:47 2020
<BR><P>
<H3>Maximum Stack Usage =        184 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; updateLCDBuffer &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[68]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[17]">ADC1_COMP_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[17]">ADC1_COMP_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[17]">ADC1_COMP_IRQHandler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[2b]">BtnCallback</a> from main.o(i.BtnCallback) referenced from main.o(i.sleepCon)
 <LI><a href="#[14]">DMA1_Channel1_IRQHandler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[15]">DMA1_Channel2_3_IRQHandler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[16]">DMA1_Channel4_5_6_7_IRQHandler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[10]">EXTI0_1_IRQHandler</a> from interrupt.o(i.EXTI0_1_IRQHandler) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[11]">EXTI2_3_IRQHandler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[12]">EXTI4_15_IRQHandler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from main.o(i.FLASH_IRQHandler) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[7]">HardFault_Handler</a> from interrupt.o(i.HardFault_Handler) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[1d]">I2C1_IRQHandler</a> from interrupt.o(i.I2C1_IRQHandler) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[1e]">I2C2_IRQHandler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[24]">LCD_IRQHandler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[18]">LPTIM1_IRQHandler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[6]">NMI_Handler</a> from interrupt.o(i.NMI_Handler) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[c]">PVD_IRQHandler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[9]">PendSV_Handler</a> from interrupt.o(i.PendSV_Handler) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[f]">RCC_CRS_IRQHandler</a> from interrupt.o(i.RCC_CRS_IRQHandler) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[23]">RNG_LPUART1_IRQHandler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[d]">RTC_IRQHandler</a> from interrupt.o(i.RTC_IRQHandler) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[5]">Reset_Handler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[1f]">SPI1_IRQHandler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[20]">SPI2_IRQHandler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[8]">SVC_Handler</a> from interrupt.o(i.SVC_Handler) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[a]">SysTick_Handler</a> from interrupt.o(i.SysTick_Handler) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[26]">SystemInit</a> from system_stm32l0xx.o(i.SystemInit) referenced from startup_stm32l053xx.o(.text)
 <LI><a href="#[1b]">TIM21_IRQHandler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[1c]">TIM22_IRQHandler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[19]">TIM2_IRQHandler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[1a]">TIM6_DAC_IRQHandler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[13]">TSC_IRQHandler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[21]">USART1_IRQHandler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[22]">USART2_IRQHandler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[25]">USB_IRQHandler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[b]">WWDG_IRQHandler</a> from startup_stm32l053xx.o(.text) referenced from startup_stm32l053xx.o(RESET)
 <LI><a href="#[2c]">__main</a> from __main.o(!!!main) referenced from startup_stm32l053xx.o(.text)
 <LI><a href="#[29]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[2a]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[28]">_sputc</a> from _sputc.o(.text) referenced from noretval__2sprintf.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[2c]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[2d]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[2f]"></a>__scatterload_rt2</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[ff]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[100]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[101]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[46]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[30]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent_end
</UL>

<P><STRONG><a name="[31]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[39]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[102]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[103]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[33]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))
<BR><BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[104]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[105]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[106]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[107]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[35]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000012))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[108]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[109]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[10a]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[10b]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[10c]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[10d]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[10e]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[10f]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[110]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[111]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[112]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[113]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[114]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[115]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[116]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[3e]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[117]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[118]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[119]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[11a]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[11b]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[11c]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[11d]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[2e]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[11e]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[36]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[38]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[11f]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[3a]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; updateLCDBuffer &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[120]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[6a]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[3d]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[121]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[3f]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[5]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>ADC1_COMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_COMP_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_COMP_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Channel2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Channel4_5_6_7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI4_15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>LCD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>LPTIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>RNG_LPUART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>TIM21_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>TIM22_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>TSC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>USB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l053xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32l053xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[41]"></a>toupper</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, toupper.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = toupper &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sevenSegCode
</UL>

<P><STRONG><a name="[43]"></a>__2sprintf</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, noretval__2sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateLCDBuffer
</UL>

<P><STRONG><a name="[45]"></a>__printf</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, __printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[32]"></a>_printf_int_dec</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned (Weak Reference)
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed (Weak Reference)
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_udiv10
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[4b]"></a>__aeabi_assert</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, assert.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__assert_puts
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_registerCallback
</UL>

<P><STRONG><a name="[122]"></a>__assert</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, assert.o(.text), UNUSED)

<P><STRONG><a name="[123]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[79]"></a>__aeabi_uidivmod</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_CRS_IRQHandler
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeUp
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateRelayCelendar
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateRTCAlarm
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manuelWorkCelender
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manuelAllWorkCelender
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[124]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[4d]"></a>__aeabi_idivmod</STRONG> (Thumb, 326 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zeller
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leap
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dow
</UL>

<P><STRONG><a name="[125]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[126]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[127]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[f4]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateLCDBuffer
</UL>

<P><STRONG><a name="[128]"></a>_d2f</STRONG> (Thumb, 120 bytes, Stack size 12 bytes, d2f.o(.text), UNUSED)

<P><STRONG><a name="[a0]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceil
</UL>

<P><STRONG><a name="[4f]"></a>_dadd</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[f3]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateLCDBuffer
</UL>

<P><STRONG><a name="[52]"></a>_dsub</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[a2]"></a>__aeabi_drsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceil
</UL>

<P><STRONG><a name="[53]"></a>_drsb</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[f5]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 64 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateLCDBuffer
</UL>

<P><STRONG><a name="[55]"></a>_ddiv</STRONG> (Thumb, 1072 bytes, Stack size 64 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drdiv
</UL>

<P><STRONG><a name="[54]"></a>_drdiv</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
</UL>

<P><STRONG><a name="[f6]"></a>__aeabi_d2uiz</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateLCDBuffer
</UL>

<P><STRONG><a name="[129]"></a>_dfixu</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, dfixui.o(.text), UNUSED)

<P><STRONG><a name="[90]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateLCDBuffer
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;batteryVoltageCon
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateBatLevelDigit
</UL>

<P><STRONG><a name="[12a]"></a>_f2d</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, f2d.o(.text), UNUSED)

<P><STRONG><a name="[8d]"></a>__aeabi_fdiv</STRONG> (Thumb, 0 bytes, Stack size 20 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;batteryVoltageCon
</UL>

<P><STRONG><a name="[57]"></a>_fdiv</STRONG> (Thumb, 334 bytes, Stack size 20 bytes, fdiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frdiv
</UL>

<P><STRONG><a name="[56]"></a>_frdiv</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fdiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
</UL>

<P><STRONG><a name="[59]"></a>__aeabi_i2f_normalise</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>

<P><STRONG><a name="[58]"></a>__aeabi_i2f</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Voltage_Conversion
</UL>

<P><STRONG><a name="[12b]"></a>_fflt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflti.o(.text), UNUSED)

<P><STRONG><a name="[5a]"></a>__aeabi_ui2f</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fflti.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f_normalise
</UL>

<P><STRONG><a name="[12c]"></a>_ffltu</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflti.o(.text), UNUSED)

<P><STRONG><a name="[42]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toupper
</UL>

<P><STRONG><a name="[4a]"></a>_printf_int_common</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding (Weak Reference)
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[44]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[28]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noretval__2sprintf.o(.text)
</UL>
<P><STRONG><a name="[4e]"></a>abort</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, abort.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>

<P><STRONG><a name="[4c]"></a>__assert_puts</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, assert_puts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __assert_puts &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>

<P><STRONG><a name="[49]"></a>__rt_udiv10</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, rtudiv10.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[5f]"></a>__fpl_dcmp_InfNaN</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, dcmpin.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN2
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drcmple
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
</UL>

<P><STRONG><a name="[62]"></a>__fpl_fcmp_InfNaN</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, fcmpin.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcheck_NaN2
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frcmple
</UL>

<P><STRONG><a name="[5e]"></a>_ttywrch</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sys_wrch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__assert_puts
</UL>

<P><STRONG><a name="[40]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[34]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>

<P><STRONG><a name="[5d]"></a>__rt_SIGABRT</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, defsig_abrt_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[60]"></a>__fpl_cmpreturn</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, cmpret.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_InfNaN
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_InfNaN
</UL>

<P><STRONG><a name="[61]"></a>__fpl_dcheck_NaN2</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dnan2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_InfNaN
</UL>

<P><STRONG><a name="[63]"></a>__fpl_fcheck_NaN2</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, fnan2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_InfNaN
</UL>

<P><STRONG><a name="[12d]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[67]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[12e]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[12f]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[130]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[131]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[37]"></a>__user_setup_stackheap</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[3c]"></a>exit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[65]"></a>__sig_exit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, defsig_exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __sig_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>

<P><STRONG><a name="[64]"></a>__rt_SIGABRT_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_abrt_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>

<P><STRONG><a name="[f7]"></a>strcmp</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[66]"></a>__fpl_return_NaN</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, retnan.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcheck_NaN2
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN2
</UL>

<P><STRONG><a name="[6b]"></a>__default_signal_display</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
</UL>

<P><STRONG><a name="[132]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[133]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[2b]"></a>BtnCallback</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, main.o(i.BtnCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = BtnCallback &rArr; wakeUp &rArr; hw_init &rArr; nxpInit &rArr; gpio_init &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeUp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.sleepCon)
</UL>
<P><STRONG><a name="[c6]"></a>ConfigureADC</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, adc.o(i.ConfigureADC))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_init
</UL>

<P><STRONG><a name="[c8]"></a>Configure_DBG</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, button.o(i.Configure_DBG))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_init
</UL>

<P><STRONG><a name="[6d]"></a>Configure_EXTI</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, button.o(i.Configure_EXTI))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Configure_EXTI &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_init
</UL>

<P><STRONG><a name="[bd]"></a>DelayValueAdjust</STRONG> (Thumb, 114 bytes, Stack size 0 bytes, button.o(i.DelayValueAdjust))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ibprs
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbprs
</UL>

<P><STRONG><a name="[f0]"></a>DisableADC</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, adc.o(i.DisableADC))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleepCon
</UL>

<P><STRONG><a name="[10]"></a>EXTI0_1_IRQHandler</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, interrupt.o(i.EXTI0_1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EXTI0_1_IRQHandler &rArr; btn_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[eb]"></a>EepromErase</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, main.o(i.EepromErase))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recort_to_EEPROM
</UL>

<P><STRONG><a name="[c7]"></a>EnableADC</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, adc.o(i.EnableADC))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_init
</UL>

<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 288 bytes, Stack size 0 bytes, main.o(i.FLASH_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>HardFault_Handler</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, interrupt.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>I2C1_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, interrupt.o(i.I2C1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>I2C_Init</STRONG> (Thumb, 244 bytes, Stack size 16 bytes, i2c.o(i.I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_Init &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_init
</UL>

<P><STRONG><a name="[72]"></a>I2C_Write</STRONG> (Thumb, 206 bytes, Stack size 16 bytes, i2c.o(i.I2C_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_I2C
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nxpInit
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleepCon
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d2]"></a>I2C_Write_LCD</STRONG> (Thumb, 216 bytes, Stack size 16 bytes, i2c.o(i.I2C_Write_LCD))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_Write_LCD
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleepCon
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[74]"></a>IncAndFwdLPrs</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, button.o(i.IncAndFwdLPrs))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IncAndFwdLPrs &rArr; anyButtonPressed
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anyButtonPressed
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;butread
</UL>

<P><STRONG><a name="[d0]"></a>Init_RTC</STRONG> (Thumb, 250 bytes, Stack size 0 bytes, rtc.o(i.Init_RTC))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateYear
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateMonth
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateMinute
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateHour
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDay
</UL>

<P><STRONG><a name="[87]"></a>LCDBufferReset</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, nxp_lcd_driver.o(i.LCDBufferReset))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selenoidCon
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;butread
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeUp
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleepCon
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwdAndBckPrs
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkPasword
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkFactoryKey
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anyButtonPressed
</UL>

<P><STRONG><a name="[92]"></a>LCDPowerOFF</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, nxp_lcd_driver.o(i.LCDPowerOFF))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleepCon
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;batteryVoltageCon
</UL>

<P><STRONG><a name="[76]"></a>LCDPowerON</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nxp_lcd_driver.o(i.LCDPowerON))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCDPowerON
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeUp
</UL>

<P><STRONG><a name="[cf]"></a>LockNVM</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, main.o(i.LockNVM))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recort_to_EEPROM
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recort_password_to_EEPROM
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_from_EEPROM
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myWatchDogBOMB
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[be]"></a>ManuelALLWorkDurationAdjust</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, button.o(i.ManuelALLWorkDurationAdjust))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ibprs
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbprs
</UL>

<P><STRONG><a name="[bf]"></a>ManuelWorkDurationAdjust</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, button.o(i.ManuelWorkDurationAdjust))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ibprs
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbprs
</UL>

<P><STRONG><a name="[6]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupt.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupt.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_CRS_IRQHandler</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, interrupt.o(i.RCC_CRS_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RCC_CRS_IRQHandler &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_IRQHandler</STRONG> (Thumb, 228 bytes, Stack size 8 bytes, interrupt.o(i.RTC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = RTC_IRQHandler &rArr; wakeUp &rArr; hw_init &rArr; nxpInit &rArr; gpio_init &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeUp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>Reset_I2C</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, i2c.o(i.Reset_I2C))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeUp
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleepCon
</UL>

<P><STRONG><a name="[8]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupt.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[b5]"></a>SelenoidStartTime_1_HourAdjust</STRONG> (Thumb, 124 bytes, Stack size 0 bytes, button.o(i.SelenoidStartTime_1_HourAdjust))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ibprs
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbprs
</UL>

<P><STRONG><a name="[b6]"></a>SelenoidStartTime_1_MinuteAdjust</STRONG> (Thumb, 124 bytes, Stack size 0 bytes, button.o(i.SelenoidStartTime_1_MinuteAdjust))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ibprs
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbprs
</UL>

<P><STRONG><a name="[b7]"></a>SelenoidStartTime_2_HourAdjust</STRONG> (Thumb, 328 bytes, Stack size 0 bytes, button.o(i.SelenoidStartTime_2_HourAdjust))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ibprs
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbprs
</UL>

<P><STRONG><a name="[b8]"></a>SelenoidStartTime_2_MinuteAdjust</STRONG> (Thumb, 328 bytes, Stack size 0 bytes, button.o(i.SelenoidStartTime_2_MinuteAdjust))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ibprs
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbprs
</UL>

<P><STRONG><a name="[b9]"></a>SelenoidStartTime_3_HourAdjust</STRONG> (Thumb, 328 bytes, Stack size 0 bytes, button.o(i.SelenoidStartTime_3_HourAdjust))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ibprs
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbprs
</UL>

<P><STRONG><a name="[ba]"></a>SelenoidStartTime_3_MinuteAdjust</STRONG> (Thumb, 328 bytes, Stack size 0 bytes, button.o(i.SelenoidStartTime_3_MinuteAdjust))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ibprs
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbprs
</UL>

<P><STRONG><a name="[bb]"></a>SelenoidStartTime_4_HourAdjust</STRONG> (Thumb, 328 bytes, Stack size 0 bytes, button.o(i.SelenoidStartTime_4_HourAdjust))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ibprs
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbprs
</UL>

<P><STRONG><a name="[bc]"></a>SelenoidStartTime_4_MinuteAdjust</STRONG> (Thumb, 328 bytes, Stack size 0 bytes, button.o(i.SelenoidStartTime_4_MinuteAdjust))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ibprs
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbprs
</UL>

<P><STRONG><a name="[c5]"></a>SetClockForADC</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, adc.o(i.SetClockForADC))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_init
</UL>

<P><STRONG><a name="[a]"></a>SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, interrupt.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_irq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 230 bytes, Stack size 24 bytes, system_stm32l0xx.o(i.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_CRS_IRQHandler
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeUp
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[26]"></a>SystemInit</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, system_stm32l0xx.o(i.SystemInit))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l053xx.o(.text)
</UL>
<P><STRONG><a name="[ce]"></a>UnlockPELOCK</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, main.o(i.UnlockPELOCK))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recort_to_EEPROM
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recort_password_to_EEPROM
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_from_EEPROM
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateInvalidPassWord
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myWatchDogBOMB
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7e]"></a>Voltage_Conversion</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, main.o(i.Voltage_Conversion))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Voltage_Conversion &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;batteryVoltageCon
</UL>

<P><STRONG><a name="[ef]"></a>__ARM_common_switch8</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, nxp_lcd_driver.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sevenSegCode
</UL>

<P><STRONG><a name="[80]"></a>adc_bat_read_disable</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, adc.o(i.adc_bat_read_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = adc_bat_read_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleepCon
</UL>

<P><STRONG><a name="[82]"></a>adc_bat_read_enable</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, adc.o(i.adc_bat_read_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = adc_bat_read_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_init
</UL>

<P><STRONG><a name="[84]"></a>adc_con_pins_init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, hw.o(i.adc_con_pins_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = adc_con_pins_init &rArr; gpio_init &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_init
</UL>

<P><STRONG><a name="[86]"></a>adc_sens_read_disable</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, adc.o(i.adc_sens_read_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = adc_sens_read_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_init
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleepCon
</UL>

<P><STRONG><a name="[75]"></a>anyButtonPressed</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, button.o(i.anyButtonPressed))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = anyButtonPressed
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDBufferReset
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;butread
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbprs
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;incAndBckLPrs
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ibprs
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwdAndBckPrs
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forwardbprs
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbprs
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbAndIncLPrs
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;backbprs
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncAndFwdLPrs
</UL>

<P><STRONG><a name="[88]"></a>arrangeGPIOforSleep</STRONG> (Thumb, 608 bytes, Stack size 16 bytes, hw.o(i.arrangeGPIOforSleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = arrangeGPIOforSleep &rArr; gpio_init &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_clear
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleepCon
</UL>

<P><STRONG><a name="[8a]"></a>backbprs</STRONG> (Thumb, 850 bytes, Stack size 8 bytes, button.o(i.backbprs))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = backbprs &rArr; anyButtonPressed
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anyButtonPressed
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;butread
</UL>

<P><STRONG><a name="[8b]"></a>batteryVoltageCon</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, main.o(i.batteryVoltageCon))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = batteryVoltageCon &rArr; Voltage_Conversion &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_delayMs
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selenoidCon
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDPowerOFF
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Voltage_Conversion
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e3]"></a>bcd2cnv</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, button.o(i.bcd2cnv))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateLCDBuffer
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateRelayCelendar
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateRTCAlarm
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manuelWorkCelender
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manuelAllWorkCelender
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateYear
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateMonth
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateMinute
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateHour
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDay
</UL>

<P><STRONG><a name="[6f]"></a>btn_isr</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, btn.o(i.btn_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = btn_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_1_IRQHandler
</UL>

<P><STRONG><a name="[94]"></a>btn_registerCallback</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, btn.o(i.btn_registerCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = btn_registerCallback &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleepCon
</UL>

<P><STRONG><a name="[95]"></a>butread</STRONG> (Thumb, 1432 bytes, Stack size 8 bytes, button.o(i.butread))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = butread &rArr; ibprs &rArr; updateYear &rArr; dow &rArr; zeller &rArr; leap &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDBufferReset
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbprs
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;incAndBckLPrs
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ibprs
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwdAndBckPrs
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forwardbprs
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbprs
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbAndIncLPrs
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkFactoryKey
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;backbprs
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anyButtonPressed
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncAndFwdLPrs
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9e]"></a>button_init</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, button.o(i.button_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = button_init &rArr; gpio_init &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_init
</UL>

<P><STRONG><a name="[df]"></a>cancelPrevIrr</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, main.o(i.cancelPrevIrr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cancelPrevIrr
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9f]"></a>ceil</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, ceil.o(i.ceil))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ceil &rArr; __aeabi_cdrcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateLCDBuffer
</UL>

<P><STRONG><a name="[de]"></a>celenderSort</STRONG> (Thumb, 172 bytes, Stack size 20 bytes, main.o(i.celenderSort))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = celenderSort
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9a]"></a>checkFactoryKey</STRONG> (Thumb, 392 bytes, Stack size 8 bytes, button.o(i.checkFactoryKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = checkFactoryKey
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearAllDetailAdjustment
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDBufferReset
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;butread
</UL>

<P><STRONG><a name="[a4]"></a>checkPasword</STRONG> (Thumb, 176 bytes, Stack size 8 bytes, button.o(i.checkPasword))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = checkPasword
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearAllDetailAdjustment
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDBufferReset
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forwardbprs
</UL>

<P><STRONG><a name="[a3]"></a>clearAllDetailAdjustment</STRONG> (Thumb, 120 bytes, Stack size 0 bytes, button.o(i.clearAllDetailAdjustment))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleepCon
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbprs
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwdAndBckPrs
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forwardbprs
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkPasword
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkFactoryKey
</UL>

<P><STRONG><a name="[a5]"></a>closeRelay1</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, selenoid.o(i.closeRelay1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = closeRelay1
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_delayMs
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selenoidCon
</UL>

<P><STRONG><a name="[a6]"></a>closeRelay2</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, selenoid.o(i.closeRelay2))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = closeRelay2
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_delayMs
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selenoidCon
</UL>

<P><STRONG><a name="[a7]"></a>closeRelay3</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, selenoid.o(i.closeRelay3))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = closeRelay3
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_delayMs
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selenoidCon
</UL>

<P><STRONG><a name="[a8]"></a>closeRelay4</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, selenoid.o(i.closeRelay4))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = closeRelay4
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_delayMs
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selenoidCon
</UL>

<P><STRONG><a name="[a9]"></a>configureAlarmA</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, rtc.o(i.configureAlarmA))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = configureAlarmA &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateRTCAlarm
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manuelWorkCelender
</UL>

<P><STRONG><a name="[ac]"></a>configureAlarmB</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, rtc.o(i.configureAlarmB))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = configureAlarmB &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeUp
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d7]"></a>copyAndPasteSelSettings</STRONG> (Thumb, 220 bytes, Stack size 0 bytes, main.o(i.copyAndPasteSelSettings))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9b]"></a>dbAndIncLPrs</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, button.o(i.dbAndIncLPrs))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dbAndIncLPrs &rArr; anyButtonPressed
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anyButtonPressed
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;butread
</UL>

<P><STRONG><a name="[96]"></a>dbprs</STRONG> (Thumb, 1360 bytes, Stack size 8 bytes, button.o(i.dbprs))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = dbprs &rArr; updateYear &rArr; dow &rArr; zeller &rArr; leap &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateYear
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateMonth
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateMinute
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateHour
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDay
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selenoidWorkDurAdj
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selectedSelenoidUpdate
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;producerPassAdj
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;passwordAdjust
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anyButtonPressed
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelenoidStartTime_4_MinuteAdjust
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelenoidStartTime_4_HourAdjust
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelenoidStartTime_3_MinuteAdjust
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelenoidStartTime_3_HourAdjust
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelenoidStartTime_2_MinuteAdjust
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelenoidStartTime_2_HourAdjust
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelenoidStartTime_1_MinuteAdjust
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelenoidStartTime_1_HourAdjust
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManuelWorkDurationAdjust
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManuelALLWorkDurationAdjust
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayValueAdjust
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;butread
</UL>

<P><STRONG><a name="[c1]"></a>dow</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, button.o(i.dow))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = dow &rArr; zeller &rArr; leap &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zeller
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateYear
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateMonth
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDay
</UL>

<P><STRONG><a name="[d5]"></a>erase_all_programs</STRONG> (Thumb, 204 bytes, Stack size 0 bytes, main.o(i.erase_all_programs))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[99]"></a>forwardbprs</STRONG> (Thumb, 1724 bytes, Stack size 8 bytes, button.o(i.forwardbprs))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = forwardbprs &rArr; checkPasword
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearAllDetailAdjustment
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selectedSelenoidUpdate
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkPasword
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anyButtonPressed
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;butread
</UL>

<P><STRONG><a name="[9d]"></a>fwdAndBckPrs</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, button.o(i.fwdAndBckPrs))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fwdAndBckPrs &rArr; anyButtonPressed
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearAllDetailAdjustment
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDBufferReset
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anyButtonPressed
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;butread
</UL>

<P><STRONG><a name="[85]"></a>gpio_init</STRONG> (Thumb, 308 bytes, Stack size 16 bytes, gpio.o(i.gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = gpio_init &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nxpInit
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_init
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_con_pins_init
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selenoid_init
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arrangeGPIOforSleep
</UL>

<P><STRONG><a name="[c3]"></a>hw_init</STRONG> (Thumb, 358 bytes, Stack size 8 bytes, hw.o(i.hw_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = hw_init &rArr; nxpInit &rArr; gpio_init &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nxpInit
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_init
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_bat_read_enable
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetClockForADC
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableADC
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Configure_EXTI
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Configure_DBG
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureADC
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_con_pins_init
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_sens_read_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeUp
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ca]"></a>hw_initSysclock</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, hw.o(i.hw_initSysclock))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeUp
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[97]"></a>ibprs</STRONG> (Thumb, 1486 bytes, Stack size 8 bytes, button.o(i.ibprs))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ibprs &rArr; updateYear &rArr; dow &rArr; zeller &rArr; leap &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateYear
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateMonth
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateMinute
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateHour
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDay
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selenoidWorkDurAdj
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selectedSelenoidUpdate
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;producerPassAdj
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;passwordAdjust
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anyButtonPressed
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelenoidStartTime_4_MinuteAdjust
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelenoidStartTime_4_HourAdjust
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelenoidStartTime_3_MinuteAdjust
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelenoidStartTime_3_HourAdjust
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelenoidStartTime_2_MinuteAdjust
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelenoidStartTime_2_HourAdjust
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelenoidStartTime_1_MinuteAdjust
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelenoidStartTime_1_HourAdjust
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManuelWorkDurationAdjust
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManuelALLWorkDurationAdjust
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayValueAdjust
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;butread
</UL>

<P><STRONG><a name="[9c]"></a>incAndBckLPrs</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, button.o(i.incAndBckLPrs))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = incAndBckLPrs &rArr; anyButtonPressed
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anyButtonPressed
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;butread
</UL>

<P><STRONG><a name="[c9]"></a>leap</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, button.o(i.leap))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = leap &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zeller
</UL>

<P><STRONG><a name="[3b]"></a>main</STRONG> (Thumb, 692 bytes, Stack size 8 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = main &rArr; updateLCDBuffer &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recort_to_EEPROM
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recort_password_to_EEPROM
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_from_EEPROM
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_all_programs
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockPELOCK
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockNVM
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateLCDBuffer
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selenoid_sleep
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selenoid_init
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selenoid_disable
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selenoidCon
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_initSysclock
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configureAlarmB
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;butread
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDBufferReset
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_RTC
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_LCD
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateSelenoidPosition
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateRTCAlarm
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateInvalidPassWord
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleepCon
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetPendingRelay
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;programCelendar
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myWatchDogBOMB
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manuelWorkCelender
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manuelAllWorkCelender
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyAndPasteSelSettings
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celenderSort
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cancelPrevIrr
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;batteryVoltageCon
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Config
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[db]"></a>manuelAllWorkCelender</STRONG> (Thumb, 450 bytes, Stack size 48 bytes, main.o(i.manuelAllWorkCelender))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = manuelAllWorkCelender
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bcd2cnv
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d9]"></a>manuelWorkCelender</STRONG> (Thumb, 404 bytes, Stack size 48 bytes, main.o(i.manuelWorkCelender))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = manuelWorkCelender &rArr; configureAlarmA &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configureAlarmA
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bcd2cnv
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[98]"></a>mbprs</STRONG> (Thumb, 196 bytes, Stack size 8 bytes, button.o(i.mbprs))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbprs &rArr; anyButtonPressed
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearAllDetailAdjustment
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anyButtonPressed
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;butread
</UL>

<P><STRONG><a name="[e2]"></a>myWatchDogBOMB</STRONG> (Thumb, 166 bytes, Stack size 40 bytes, main.o(i.myWatchDogBOMB))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = myWatchDogBOMB
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockPELOCK
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockNVM
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c4]"></a>nxpInit</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, nxp_lcd_driver.o(i.nxpInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = nxpInit &rArr; gpio_init &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_init
</UL>

<P><STRONG><a name="[e4]"></a>openRelay1</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, selenoid.o(i.openRelay1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = openRelay1
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_clear
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_delayMs
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selenoidCon
</UL>

<P><STRONG><a name="[e7]"></a>openRelay2</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, selenoid.o(i.openRelay2))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = openRelay2
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_clear
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_delayMs
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selenoidCon
</UL>

<P><STRONG><a name="[e8]"></a>openRelay3</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, selenoid.o(i.openRelay3))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = openRelay3
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_clear
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_delayMs
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selenoidCon
</UL>

<P><STRONG><a name="[e9]"></a>openRelay4</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, selenoid.o(i.openRelay4))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = openRelay4
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_clear
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_delayMs
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selenoidCon
</UL>

<P><STRONG><a name="[c0]"></a>passwordAdjust</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, button.o(i.passwordAdjust))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = passwordAdjust
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ibprs
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbprs
</UL>

<P><STRONG><a name="[ad]"></a>producerPassAdj</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, button.o(i.producerPassAdj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = producerPassAdj
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ibprs
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbprs
</UL>

<P><STRONG><a name="[dd]"></a>programCelendar</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, main.o(i.programCelendar))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = programCelendar &rArr; updateRelayCelendar
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateRelayCelendar
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d1]"></a>read_from_EEPROM</STRONG> (Thumb, 464 bytes, Stack size 8 bytes, main.o(i.read_from_EEPROM))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = read_from_EEPROM
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockPELOCK
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockNVM
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d4]"></a>recort_password_to_EEPROM</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, main.o(i.recort_password_to_EEPROM))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = recort_password_to_EEPROM
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockPELOCK
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockNVM
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d3]"></a>recort_to_EEPROM</STRONG> (Thumb, 488 bytes, Stack size 8 bytes, main.o(i.recort_to_EEPROM))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = recort_to_EEPROM
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockPELOCK
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockNVM
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromErase
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[da]"></a>resetPendingRelay</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, main.o(i.resetPendingRelay))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b3]"></a>selectedSelenoidUpdate</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, button.o(i.selectedSelenoidUpdate))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ibprs
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forwardbprs
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbprs
</UL>

<P><STRONG><a name="[93]"></a>selenoidCon</STRONG> (Thumb, 532 bytes, Stack size 8 bytes, selenoid.o(i.selenoidCon))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = selenoidCon &rArr; selenoid_sleep
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_delayMs
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selenoid_sleep
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selenoid_disable
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDBufferReset
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selenoid_wakeup
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selenoid_enable
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openRelay4
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openRelay3
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openRelay2
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openRelay1
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closeRelay4
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closeRelay3
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closeRelay2
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closeRelay1
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;batteryVoltageCon
</UL>

<P><STRONG><a name="[b4]"></a>selenoidWorkDurAdj</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, button.o(i.selenoidWorkDurAdj))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ibprs
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbprs
</UL>

<P><STRONG><a name="[cd]"></a>selenoid_disable</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, selenoid.o(i.selenoid_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = selenoid_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selenoidCon
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleepCon
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ed]"></a>selenoid_enable</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, selenoid.o(i.selenoid_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = selenoid_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selenoidCon
</UL>

<P><STRONG><a name="[cb]"></a>selenoid_init</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, selenoid.o(i.selenoid_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = selenoid_init &rArr; gpio_init &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeUp
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[cc]"></a>selenoid_sleep</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, selenoid.o(i.selenoid_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = selenoid_sleep
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selenoidCon
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleepCon
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ec]"></a>selenoid_wakeup</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, selenoid.o(i.selenoid_wakeup))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = selenoid_wakeup
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selenoidCon
</UL>

<P><STRONG><a name="[ee]"></a>sevenSegCode</STRONG> (Thumb, 252 bytes, Stack size 16 bytes, nxp_lcd_driver.o(i.sevenSegCode))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sevenSegCode &rArr; toupper &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toupper
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateLCDBuffer
</UL>

<P><STRONG><a name="[e1]"></a>sleepCon</STRONG> (Thumb, 546 bytes, Stack size 8 bytes, main.o(i.sleepCon))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = sleepCon &rArr; arrangeGPIOforSleep &rArr; gpio_init &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selenoid_sleep
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selenoid_disable
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearAllDetailAdjustment
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_registerCallback
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arrangeGPIOforSleep
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_sens_read_disable
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_bat_read_disable
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_I2C
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDPowerOFF
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDBufferReset
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_LCD
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableADC
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8c]"></a>systick_delayMs</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, systick.o(i.systick_delayMs))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selenoidCon
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;batteryVoltageCon
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openRelay4
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openRelay3
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openRelay2
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openRelay1
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closeRelay4
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closeRelay3
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closeRelay2
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closeRelay1
</UL>

<P><STRONG><a name="[7d]"></a>systick_irq</STRONG> (Thumb, 750 bytes, Stack size 0 bytes, systick.o(i.systick_irq))
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[f2]"></a>updateBatLevelDigit</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, nxp_lcd_driver.o(i.updateBatLevelDigit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = updateBatLevelDigit &rArr; __aeabi_cdrcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateLCDBuffer
</UL>

<P><STRONG><a name="[ae]"></a>updateDay</STRONG> (Thumb, 460 bytes, Stack size 8 bytes, button.o(i.updateDay))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = updateDay &rArr; dow &rArr; zeller &rArr; leap &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bcd2cnv
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_RTC
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dow
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ibprs
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbprs
</UL>

<P><STRONG><a name="[b1]"></a>updateHour</STRONG> (Thumb, 206 bytes, Stack size 8 bytes, button.o(i.updateHour))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = updateHour
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bcd2cnv
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_RTC
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ibprs
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbprs
</UL>

<P><STRONG><a name="[d6]"></a>updateInvalidPassWord</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, main.o(i.updateInvalidPassWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = updateInvalidPassWord
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockPELOCK
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d8]"></a>updateLCDBuffer</STRONG> (Thumb, 13334 bytes, Stack size 56 bytes, nxp_lcd_driver.o(i.updateLCDBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = updateLCDBuffer &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bcd2cnv
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateBatLevelDigit
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sevenSegCode
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceil
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b2]"></a>updateMinute</STRONG> (Thumb, 206 bytes, Stack size 8 bytes, button.o(i.updateMinute))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = updateMinute
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bcd2cnv
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_RTC
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ibprs
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbprs
</UL>

<P><STRONG><a name="[af]"></a>updateMonth</STRONG> (Thumb, 246 bytes, Stack size 8 bytes, button.o(i.updateMonth))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = updateMonth &rArr; dow &rArr; zeller &rArr; leap &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bcd2cnv
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_RTC
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dow
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ibprs
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbprs
</UL>

<P><STRONG><a name="[dc]"></a>updateRTCAlarm</STRONG> (Thumb, 1226 bytes, Stack size 64 bytes, main.o(i.updateRTCAlarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = updateRTCAlarm &rArr; configureAlarmA &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configureAlarmA
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bcd2cnv
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ea]"></a>updateRelayCelendar</STRONG> (Thumb, 1326 bytes, Stack size 48 bytes, main.o(i.updateRelayCelendar))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = updateRelayCelendar
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bcd2cnv
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;programCelendar
</UL>

<P><STRONG><a name="[e0]"></a>updateSelenoidPosition</STRONG> (Thumb, 348 bytes, Stack size 0 bytes, main.o(i.updateSelenoidPosition))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b0]"></a>updateYear</STRONG> (Thumb, 244 bytes, Stack size 8 bytes, button.o(i.updateYear))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = updateYear &rArr; dow &rArr; zeller &rArr; leap &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bcd2cnv
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_RTC
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dow
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ibprs
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbprs
</UL>

<P><STRONG><a name="[6c]"></a>wakeUp</STRONG> (Thumb, 294 bytes, Stack size 8 bytes, main.o(i.wakeUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = wakeUp &rArr; hw_init &rArr; nxpInit &rArr; gpio_init &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selenoid_init
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_initSysclock
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configureAlarmB
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_I2C
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDPowerON
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDBufferReset
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Config
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtnCallback
</UL>

<P><STRONG><a name="[c2]"></a>zeller</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, button.o(i.zeller))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = zeller &rArr; leap &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leap
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dow
</UL>

<P><STRONG><a name="[29]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[91]"></a>__aeabi_cdcmple</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, dlef.o(x$fpl$dleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;batteryVoltageCon
</UL>

<P><STRONG><a name="[f8]"></a>_dcmple</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, dlef.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_InfNaN
</UL>

<P><STRONG><a name="[a1]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, drlef.o(x$fpl$drleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateBatLevelDigit
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceil
</UL>

<P><STRONG><a name="[f9]"></a>_drcmple</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, drlef.o(x$fpl$drleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_InfNaN
</UL>

<P><STRONG><a name="[8e]"></a>__aeabi_fadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;batteryVoltageCon
</UL>

<P><STRONG><a name="[fa]"></a>_fadd</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
</UL>

<P><STRONG><a name="[7f]"></a>__aeabi_fmul</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateLCDBuffer
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Voltage_Conversion
</UL>

<P><STRONG><a name="[134]"></a>_fmul</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul), UNUSED)

<P><STRONG><a name="[8f]"></a>__aeabi_cfrcmple</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, frlef.o(x$fpl$frleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_cfrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateLCDBuffer
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;batteryVoltageCon
</UL>

<P><STRONG><a name="[fc]"></a>_frcmple</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, frlef.o(x$fpl$frleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_InfNaN
</UL>

<P><STRONG><a name="[135]"></a>__aeabi_fsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fsub), UNUSED)

<P><STRONG><a name="[fd]"></a>_fsub</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[f1]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, main.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleepCon
</UL>

<P><STRONG><a name="[7c]"></a>NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, main.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleepCon
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Config
</UL>

<P><STRONG><a name="[7b]"></a>SysTick_Config</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, main.o(i.SysTick_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SysTick_Config &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeUp
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[89]"></a>gpio_clear</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hw.o(i.gpio_clear))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arrangeGPIOforSleep
</UL>

<P><STRONG><a name="[7a]"></a>NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, interrupt.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_CRS_IRQHandler
</UL>

<P><STRONG><a name="[81]"></a>gpio_clear</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, adc.o(i.gpio_clear))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_sens_read_disable
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_bat_read_disable
</UL>

<P><STRONG><a name="[83]"></a>gpio_set</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, adc.o(i.gpio_set))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_bat_read_enable
</UL>

<P><STRONG><a name="[ab]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rtc.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configureAlarmB
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configureAlarmA
</UL>

<P><STRONG><a name="[aa]"></a>NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, rtc.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configureAlarmB
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configureAlarmA
</UL>

<P><STRONG><a name="[e6]"></a>gpio_clear</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, selenoid.o(i.gpio_clear))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selenoid_sleep
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selenoid_disable
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openRelay4
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openRelay3
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openRelay2
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openRelay1
</UL>

<P><STRONG><a name="[e5]"></a>gpio_set</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, selenoid.o(i.gpio_set))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selenoid_wakeup
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selenoid_enable
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openRelay4
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openRelay3
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openRelay2
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openRelay1
</UL>

<P><STRONG><a name="[6e]"></a>NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, button.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Configure_EXTI
</UL>

<P><STRONG><a name="[71]"></a>NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, i2c.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
</UL>

<P><STRONG><a name="[77]"></a>gpio_set</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nxp_lcd_driver.o(i.gpio_set))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nxpInit
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDPowerON
</UL>

<P><STRONG><a name="[51]"></a>_dadd1</STRONG> (Thumb, 290 bytes, Stack size 20 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[50]"></a>_dsub1</STRONG> (Thumb, 470 bytes, Stack size 40 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[fe]"></a>_fadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub.o(x$fpl$fadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
</UL>

<P><STRONG><a name="[fb]"></a>_fsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub.o(x$fpl$fsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>

<P><STRONG><a name="[2a]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[69]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[5c]"></a>_printf_post_padding</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[5b]"></a>_printf_pre_padding</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[47]"></a>_printf_truncate_signed</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[48]"></a>_printf_truncate_unsigned</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>
<HR></body></html>
